{"version":3,"sources":["components/helperFunctions.js","components/timer.jsx","index.js"],"names":["componentToHex","c","hex","toString","length","TimerFormat","currentCount","Math","floor","CountToRGB","r","g","b","RGBBaseValue","divStyle","color","margin","alignItems","fontSize","textShadow","Timer","props","state","count","laps","timerRunning","clearInterval","this","timer","setState","setInterval","tick","bind","helpers","concat","map","style","key","onClick","startTimer","stopTimer","handleLap","resetTimer","className","timerState","startAction","stopAction","lapAction","resetAction","lapsOutput","Component","element","ReactDOM","render","document","getElementById"],"mappings":"yLAcA,SAASA,EAAeC,GACtB,IAAIC,EAAMD,EAAEE,SAAS,IACrB,OAAsB,IAAfD,EAAIE,OAAe,IAAMF,EAAMA,EAczB,OAAEG,YA7BjB,SAAqBC,GAUnB,OATYC,KAAKC,MACdF,EAAY,MAAb,MAOQ,KALIC,KAAKC,MAAOF,EAAY,KAAb,KAKE,KAJbC,KAAKC,MAAOF,EAAY,IAAiB,KAIX,KAH1BC,KAAKC,MAAsB,GAAfF,EAAqB,KAGc,OAoBrCG,WAN9B,SAAoBH,GAClB,IANgBI,EAAGC,EAAGC,EAMlBC,EAAeN,KAAKC,MAAOF,EAAY,IAAiB,KAE5D,OARgBI,EAQAH,KAAKC,MAAM,IAAMK,GARdF,EAQ6B,IAR1BC,EAQ+B,IAP9C,IAAMZ,EAAeU,GAAKV,EAAeW,GAAKX,EAAeY,KCjBhEE,EAAW,CACfC,MAAO,UACPC,OAAQ,MACRC,WAAY,SACZC,SAAU,OACVC,WAAY,mBA2HCC,E,YAvHb,WAAYC,GAAQ,IAAD,8BACjB,4CAAMA,KACDC,MAAQ,CAAEC,MAAO,EAAGC,KAAM,GAAIC,cAAc,GAFhC,E,oFAMjBC,cAAcC,KAAKC,S,6BAGnBD,KAAKE,SAAS,CAAEN,MAAOI,KAAKL,MAAMC,MAAQ,M,mCAG1CG,cAAcC,KAAKC,OACnBD,KAAKC,MAAQE,YAAYH,KAAKI,KAAKC,KAAKL,MAAO,M,kCAG/CD,cAAcC,KAAKC,S,mCAGnBD,KAAKE,SAAS,CAAEN,MAAO,IACvBI,KAAKE,SAAS,CAAEL,KAAM,O,kCAGtB,IAAIlB,EAAe2B,EAAQ5B,YAAYsB,KAAKL,MAAMC,OAClDI,KAAKE,SAAS,CAAEL,KAAMG,KAAKL,MAAME,KAAKU,OAAO5B,O,mCAI7C,OAA+B,IAA3BqB,KAAKL,MAAME,KAAKpB,OACX,KAGL,4BACGuB,KAAKL,MAAME,KAAKW,IAAI,SAAAX,GAAI,OACvB,wBAAIY,MAAOtB,EAAUuB,IAAKb,GACvBA,Q,oCAQE,IAAD,OACZ,OAAgC,IAA5BG,KAAKL,MAAMG,aACN,KAGL,4BACEa,QAAS,WACP,EAAKC,aACL,EAAKV,SAAS,CAAEJ,cAAc,MAHlC,W,mCAWQ,IAAD,OACX,OAAgC,IAA5BE,KAAKL,MAAMG,aACN,KAGL,4BACEa,QAAS,WACP,EAAKE,YACL,EAAKX,SAAS,CAAEJ,cAAc,MAHlC,U,kCAYJ,OAAgC,IAA5BE,KAAKL,MAAMG,aACN,4BAAQa,QAASX,KAAKc,UAAUT,KAAKL,OAArC,OAEA,4BAAQS,MAAO,CAAErB,MAAO,QAAxB,S,oCAIT,OAAgC,IAA5BY,KAAKL,MAAMG,aACN,4BAAQa,QAASX,KAAKe,WAAWV,KAAKL,OAAtC,SAEA,4BAAQS,MAAO,CAAErB,MAAO,QAAxB,W,mCAIT,OAAgC,IAA5BY,KAAKL,MAAMG,aAEX,wBAAIW,MAAO,CAAErB,MAAO,UACjBkB,EAAQ5B,YAAYsB,KAAKL,MAAMC,QAKlC,wBAAIa,MAAO,CAAErB,MAAOkB,EAAQxB,WAAWkB,KAAKL,MAAMC,SAC/CU,EAAQ5B,YAAYsB,KAAKL,MAAMC,U,+BAMtC,OACE,yBAAKoB,UAAU,SACZhB,KAAKiB,aACN,6BACGjB,KAAKkB,cACLlB,KAAKmB,aACLnB,KAAKoB,YACLpB,KAAKqB,eAER,6BAAMrB,KAAKsB,mB,GAnHCC,aCCdC,EAAU,wBAAIf,MARH,CACfrB,MAAO,UACPC,OAAQ,OACRC,WAAY,SACZC,SAAU,OACVC,WAAY,wBAGE,kBAEhBiC,IAASC,OAAOF,EAASG,SAASC,eAAe,YACjDH,IAASC,OAAO,kBAAC,EAAD,MAAWC,SAASC,eAAe,W","file":"static/js/main.6602211b.chunk.js","sourcesContent":["//timer style\r\nfunction TimerFormat(currentCount) {\r\n  let hours = Math.floor(\r\n    (currentCount % (100 * 60 * 60 * 24)) / (100 * 60 * 60)\r\n  );\r\n  let minutes = Math.floor((currentCount % (100 * 60 * 60)) / (100 * 60));\r\n  let seconds = Math.floor((currentCount % (100 * 60)) / 100);\r\n  let miliseconds = Math.floor((currentCount * 10) % 1000);\r\n\r\n  let format =\r\n    hours + \"h \" + minutes + \"m \" + seconds + \"s \" + miliseconds + \"ms \";\r\n  return format;\r\n}\r\n//Change int to HEX\r\nfunction componentToHex(c) {\r\n  let hex = c.toString(16);\r\n  return hex.length === 1 ? \"0\" + hex : hex;\r\n}\r\n//change RGB color to HEX color\r\nfunction rgbToHex(r, g, b) {\r\n  return \"#\" + componentToHex(r) + componentToHex(g) + componentToHex(b);\r\n}\r\n\r\n//RGB logic\r\nfunction CountToRGB(currentCount) {\r\n  let RGBBaseValue = Math.floor((currentCount % (100 * 60)) / 100);\r\n\r\n  return rgbToHex(Math.floor(4.5 * RGBBaseValue), 255, 255);\r\n}\r\n\r\nexport default { TimerFormat, CountToRGB };\r\n","import React, { Component } from \"react\";\r\nimport helpers from \"./helperFunctions.js\";\r\n\r\nconst divStyle = {\r\n  color: \"#F148FB\",\r\n  margin: \"5px\",\r\n  alignItems: \"center\",\r\n  fontSize: \"20px\",\r\n  textShadow: \"1px 1px #00C2BA\"\r\n};\r\n\r\nclass Timer extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = { count: 0, laps: [], timerRunning: false };\r\n  }\r\n  //Timer body\r\n  componentWillUnmount() {\r\n    clearInterval(this.timer);\r\n  }\r\n  tick() {\r\n    this.setState({ count: this.state.count + 1 });\r\n  }\r\n  startTimer() {\r\n    clearInterval(this.timer);\r\n    this.timer = setInterval(this.tick.bind(this), 10);\r\n  }\r\n  stopTimer() {\r\n    clearInterval(this.timer);\r\n  }\r\n  resetTimer() {\r\n    this.setState({ count: 0 });\r\n    this.setState({ laps: [] });\r\n  }\r\n  handleLap() {\r\n    var currentCount = helpers.TimerFormat(this.state.count);\r\n    this.setState({ laps: this.state.laps.concat(currentCount) });\r\n  }\r\n  //Add laps\r\n  lapsOutput() {\r\n    if (this.state.laps.length === 0) {\r\n      return null;\r\n    } else {\r\n      return (\r\n        <ul>\r\n          {this.state.laps.map(laps => (\r\n            <li style={divStyle} key={laps}>\r\n              {laps}\r\n            </li>\r\n          ))}\r\n        </ul>\r\n      );\r\n    }\r\n  }\r\n  //buttons\r\n  startAction() {\r\n    if (this.state.timerRunning === true) {\r\n      return null;\r\n    } else {\r\n      return (\r\n        <button\r\n          onClick={() => {\r\n            this.startTimer();\r\n            this.setState({ timerRunning: true });\r\n          }}\r\n        >\r\n          Start\r\n        </button>\r\n      );\r\n    }\r\n  }\r\n  stopAction() {\r\n    if (this.state.timerRunning === false) {\r\n      return null;\r\n    } else {\r\n      return (\r\n        <button\r\n          onClick={() => {\r\n            this.stopTimer();\r\n            this.setState({ timerRunning: false });\r\n          }}\r\n        >\r\n          Stop\r\n        </button>\r\n      );\r\n    }\r\n  }\r\n  lapAction() {\r\n    if (this.state.timerRunning === true) {\r\n      return <button onClick={this.handleLap.bind(this)}>Lap</button>;\r\n    } else {\r\n      return <button style={{ color: \"red\" }}>Lap</button>;\r\n    }\r\n  }\r\n  resetAction() {\r\n    if (this.state.timerRunning === false) {\r\n      return <button onClick={this.resetTimer.bind(this)}>Reset</button>;\r\n    } else {\r\n      return <button style={{ color: \"red\" }}>Reset</button>;\r\n    }\r\n  }\r\n  timerState() {\r\n    if (this.state.timerRunning === false) {\r\n      return (\r\n        <h1 style={{ color: \"white\" }}>\r\n          {helpers.TimerFormat(this.state.count)}\r\n        </h1>\r\n      );\r\n    } else {\r\n      return (\r\n        <h1 style={{ color: helpers.CountToRGB(this.state.count) }}>\r\n          {helpers.TimerFormat(this.state.count)}\r\n        </h1>\r\n      );\r\n    }\r\n  }\r\n  render() {\r\n    return (\r\n      <div className=\"timer\">\r\n        {this.timerState()}\r\n        <div>\r\n          {this.startAction()}\r\n          {this.stopAction()}\r\n          {this.lapAction()}\r\n          {this.resetAction()}\r\n        </div>\r\n        <div>{this.lapsOutput()}</div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\nexport default Timer;\r\n","import React, { Component } from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport Timer from \"./components/timer\";\r\n\r\nconst divStyle = {\r\n  color: \"#F148FB\",\r\n  margin: \"40px\",\r\n  alignItems: \"center\",\r\n  fontSize: \"50px\",\r\n  textShadow: \"3px 3px 5px #00C2BA\"\r\n};\r\n\r\nconst element = <h1 style={divStyle}>Stop Watch App</h1>;\r\n\r\nReactDOM.render(element, document.getElementById(\"Welcome\"));\r\nReactDOM.render(<Timer />, document.getElementById(\"Timer\"));\r\n"],"sourceRoot":""}