{"version":3,"sources":["components/timer.jsx","index.js"],"names":["TimerFormat","currentCount","Math","floor","Timer","props","state","count","laps","timerRunning","clearInterval","this","timer","setState","setInterval","tick","bind","concat","length","map","key","onClick","startTimer","stopTimer","handleLap","resetTimer","className","startAction","stopAction","lapAction","resetAction","lapsOutput","Component","element","ReactDOM","render","document","getElementById"],"mappings":"yLAEA,SAASA,EAAYC,GAQlB,OANWC,KAAKC,MAAOF,EAAY,MAAb,MAKH,KAJNC,KAAKC,MAAOF,EAAY,KAAb,KAIW,KAHtBC,KAAKC,MAAOF,EAAY,IAAiB,KAGF,KAFnCC,KAAKC,MAAoB,GAAbF,EAAmB,KAEyB,M,IA+F7DG,E,YA1FX,WAAaC,GAAQ,IAAD,8BAChB,4CAAMA,KACDC,MAAQ,CAACC,MAAO,EACnBC,KAAK,GACLC,cAAa,GAJC,E,oFAQhBC,cAAcC,KAAKC,S,6BAGnBD,KAAKE,SAAS,CAACN,MAAQI,KAAKL,MAAMC,MAAQ,M,mCAG1CG,cAAcC,KAAKC,OACnBD,KAAKC,MAAQE,YAAYH,KAAKI,KAAKC,KAAKL,MAAO,M,kCAG/CD,cAAcC,KAAKC,S,mCAGnBD,KAAKE,SAAS,CAACN,MAAM,IACrBI,KAAKE,SAAS,CAACL,KAAK,O,kCAGtB,IAAIP,EAAaD,EAAYW,KAAKL,MAAMC,OACxCI,KAAKE,SAAS,CAACL,KAAMG,KAAKL,MAAME,KAAKS,OAAOhB,O,mCAI5C,OAA6B,IAAzBU,KAAKL,MAAME,KAAKU,OACT,KAGC,4BACHP,KAAKL,MAAME,KAAKW,IAAI,SAAAX,GAAI,OAAG,wBAAIY,IAAKZ,GAAOA,Q,oCAMxC,IAAD,OACX,OAA8B,IAA1BG,KAAKL,MAAMG,aACN,KAGA,4BAAQY,QAAS,WAAK,EAAKC,aAAc,EAAKT,SAAS,CAACJ,cAAa,MAArE,W,mCAGE,IAAD,OACV,OAA8B,IAA1BE,KAAKL,MAAMG,aACN,KAGC,4BAAQY,QAAS,WAAK,EAAKE,YAAa,EAAKV,SAAS,CAACJ,cAAa,MAApE,U,kCAIV,OAA8B,IAA1BE,KAAKL,MAAMG,aACN,4BAAQY,QAASV,KAAKa,UAAUR,KAAKL,OAArC,OAGC,yC,oCAIV,OAA8B,IAA1BA,KAAKL,MAAMG,aACN,4BAAQY,QAASV,KAAKc,WAAWT,KAAKL,OAAtC,SAGC,2C,+BAIR,OACA,yBAAKe,UAAU,SACX,4BAAK1B,EAAYW,KAAKL,MAAMC,QAC5B,6BACCI,KAAKgB,cACLhB,KAAKiB,aACLjB,KAAKkB,YACLlB,KAAKmB,eAEN,6BACCnB,KAAKoB,mB,GArFEC,aCTdC,EAAU,8CAEhBC,IAASC,OAAOF,EAAQG,SAASC,eAAe,YAChDH,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,W","file":"static/js/main.17ebfbc6.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\n\r\nfunction TimerFormat(currentCount){\r\n  \r\n  var hours = Math.floor((currentCount % (100 * 60 * 60 * 24)) / (100 * 60 * 60));\r\n  var minutes = Math.floor((currentCount % (100 * 60 * 60)) / (100 * 60));\r\n  var seconds = Math.floor((currentCount % (100 * 60)) / 100);\r\n  var miliseconds = Math.floor((currentCount*10) % 1000);\r\n\r\n  var format= hours + \"h \"+ minutes + \"m \" + seconds + \"s \" + miliseconds + \"ms \";\r\n   return (format);\r\n}\r\n \r\nclass Timer extends Component {\r\n    constructor (props) {\r\n        super(props)\r\n        this.state = {count: 0,\r\n          laps:[],\r\n          timerRunning:false}\r\n      }\r\n//Timer body\r\n    componentWillUnmount () {\r\n        clearInterval(this.timer)\r\n      }\r\n    tick () {\r\n        this.setState({count: (this.state.count + 1)})\r\n      }\r\n    startTimer () {\r\n        clearInterval(this.timer)\r\n        this.timer = setInterval(this.tick.bind(this), 10)\r\n      }\r\n    stopTimer () {\r\n        clearInterval(this.timer)\r\n      }\r\n    resetTimer () {\r\n        this.setState({count:0})\r\n        this.setState({laps:[]})\r\n      }\r\n    handleLap(){\r\n      var currentCount=TimerFormat(this.state.count)\r\n      this.setState({laps: this.state.laps.concat(currentCount)})\r\n    }\r\n//Add laps \r\n    lapsOutput(){\r\n      if (this.state.laps.length===0){\r\n          return null;\r\n      }\r\n      else{\r\n          return (<ul>\r\n              {this.state.laps.map(laps =><li key={laps}>{laps}</li>)}\r\n          </ul>\r\n          )\r\n      }\r\n  }\r\n//buttons \r\n    startAction(){\r\n      if (this.state.timerRunning===true){\r\n        return null;\r\n    } \r\n      else{\r\n       return (<button onClick={()=>{this.startTimer(); this.setState({timerRunning:true});}}>Start</button>);\r\n      }\r\n    }\r\n    stopAction(){\r\n      if (this.state.timerRunning===false){\r\n        return null;\r\n      } \r\n      else{\r\n        return (<button onClick={()=>{this.stopTimer(); this.setState({timerRunning:false});}}>Stop</button>);\r\n      }\r\n    }\r\n    lapAction(){\r\n      if (this.state.timerRunning===true){\r\n        return <button onClick={this.handleLap.bind(this)}>Lap</button>;\r\n      } \r\n      else{\r\n        return (<button>Lap</button>);\r\n      }\r\n    }\r\n    resetAction(){\r\n      if (this.state.timerRunning===false){\r\n        return <button onClick={this.resetTimer.bind(this)}>Reset</button>;\r\n      } \r\n      else{\r\n        return (<button>Reset</button>);\r\n      }\r\n    }\r\n    render () {\r\n        return (\r\n        <div className='timer'>\r\n            <h1>{TimerFormat(this.state.count)}</h1>\r\n            <div>\r\n            {this.startAction()}\r\n            {this.stopAction()}\r\n            {this.lapAction()}\r\n            {this.resetAction()}\r\n            </div>\r\n            <div>\r\n            {this.lapsOutput()}\r\n            </div>\r\n        </div>\r\n        )\r\n    }\r\n}\r\nexport default Timer;","import React, { Component } from 'react';\r\nimport ReactDOM from 'react-dom'\r\nimport Timer from './components/timer'\r\n\r\nconst element = <h1>Stop Watch App</h1>;\r\n\r\nReactDOM.render(element,document.getElementById('Welcome'))\r\nReactDOM.render(<Timer/>,document.getElementById('Timer'))"],"sourceRoot":""}